Ang GitHub ay isa sa pinakamalaking komunidad ng mga developer sa mundo. Isa itong masalimuot na platform na nagpapatibay ng pakikipagtulungan at komunikasyon sa pagitan ng mga developer. Ang GitHub ay may ilang kapaki-pakinabang na feature na nagbibigay-daan sa mga development team na magtulungan sa parehong proyekto at madaling gumawa ng mga bagong bersyon ng software nang hindi nakakaabala sa mga kasalukuyang bersyon, ngunit hindi ito titigil doon.

Mayroong ilang mga dahilan.. Ang una ay na ito ay nagbibigay-daan sa makinis at madaling pakikipagtulungan at kontrol sa bersyon. Binibigyang-daan ka nitong magtrabaho sa code kasama ng sinuman mula sa kahit saan. Bukod pa rito, maraming employer ang gumagamit ng GitHub. Kaya, kung plano mong makakuha ng trabaho, magiging maganda ka kung alam mo na ang iyong paraan sa paligid ng GitHub. At huwag kalimutan ang tungkol sa mga koneksyon, pag-aaral, at mga aspeto ng portfolio. Ang GitHub ay isang matatag na platform sa pag-aaral at pakikipagtulungan. Maglaan ng oras upang galugarin ito at tingnan kung gaano nito mapalawak ang iyong kaalaman sa programming.

During the video, Carpenter defines some of the common terms teams will need to understand when using GitHub. They are:

Repository (repo) — a folder in which all files and their version histories are stored.
Branch — a workspace in which you can make changes that won’t affect the live site.
Markdown (.md) — a way to write in Github that converts plain text to GitHub code. Sites such as Atom and Sublime Text are examples of free resources for developers using Markdown.
Commit Changes — a saved record of a change made to a file within the repo.
Pull Request (PR) — the way to ask for changes made to a branch to be merged into another branch that also allows for multiple users to see, discuss and review work being done.
Merge — after a pull request is approved, the commit will be pulled in (or merged) from one branch to another and then, deployed on the live site
Issues — how work is tracked when using git. Issues allow users to report new tasks and content fixes, as well as allows users to track progress on a project board from beginning to end of a specific project.
Federalist — a platform that securely deploys a website from a GitHub repository in minutes and lets users preview proposed and published changes.

How do I Use a GitHub?
1. Sign up for GitHub
- Upang magamit ang GitHub, kakailanganin mo ng isang GitHub account. Maaari kang lumikha ng isang libreng GitHub account dito at simulang gamitin ang GitHub kaagad. Sa isang libreng account, makakakuha ka ng access sa walang limitasyong pampubliko at pribadong mga repositoryo. Makakakuha ka rin ng pagsubaybay sa bug at mga feature sa pamamahala ng proyekto. Ang tanging downside ay papayagan ka lang ng tatlong collaborator para sa mga pribadong repositoryo. Kung nasa yugto ka pa rin ng "GitHub para sa mga nagsisimula," ang pag-sign up para sa isang libreng account ay isang magandang lugar upang magsimula.
2. Install Git
- Gumagana ang GitHub sa Git. Ano ang Git? Ang Git ay isang version-control system na nilikha ng programming icon, Linus Torvald. Siya ang orihinal na gumawa ng Git upang subaybayan ang mga pagbabago sa mga pagbabago sa source code habang binubuo niya ang Linux operating system. Tinutulungan ng Git ang mga programmer na mag-collaborate, mag-coordinate ng trabaho, at magtulungan sa mga kumplikadong code at mga proyekto sa pagpapaunlad. Sinusubaybayan ng Git ang mga pagbabago at tinutulungan ang mga koponan na magtrabaho nang malayuan sa mga masalimuot na programa. Mag-click dito upang i-install ang Git sa iyong computer. Mas gusto ng ilan na gumawa ng mga pagbabago gamit ang command line sa Git mismo. Gayunpaman, para sa aming mga layunin, magtutuon kami sa kung paano gawin ang mga bagay sa loob ng GitHub.
3. Create a Repository
- Para magawa ang anuman sa GitHub, kakailanganin mong malaman kung paano muna magsimula ng repositoryo. Ang isang repositoryo (o repo) ay mahalagang magkasingkahulugan ng salitang "proyekto." Sa madaling salita, iniimbak ng isang repositoryo ang lahat ng bagay na may kinalaman sa isang partikular na proyekto kabilang ang mga file, larawan, spreadsheet, set ng data, at video, na kadalasang pinagbubukod-bukod sa mga file. Pinakamainam na magsama ng README file sa loob ng iyong repository na may partikular na impormasyon tungkol sa ibinigay na proyekto. Sa GitHub, maaari kang magdagdag ng README file kapag gumawa ka ng bagong repositoryo.
- Upang lumikha ng bagong repositoryo, pindutin mo ang "bagong repositoryo" sa kanang sulok sa itaas. Maaari mong pangalanan ang iyong repositoryo, magsama ng maikling paglalarawan, at lagyan ng check ang kahon na nagsasabing "simulan ang repositoryo na ito gamit ang README." Sa wakas, i-click mo ang "lumikha ng repositoryo."
4. Create a Branch
- Multi-faceted ang mga proyekto at maraming bersyon ng program ang kailangan kapag gumagawa ka. Binibigyang-daan ka ng branching na mag-edit ng maraming natatanging bersyon ng isang repository nang sabay-sabay. Ang iyong repositoryo ay awtomatikong mayroong isang tiyak na sangay na tinatawag na master. Maaari kang magtrabaho sa maraming iba't ibang sangay upang makagawa ng mga pag-edit bago tuluyang ibigay ang mga ito sa master branch.

Kapag nagsimula ang isang bagong sangay, isa itong kopya ng master branch hanggang sa i-edit mo ito para gumawa ng mga bagong pagbabago. Karaniwang dumaan ang isang sangay sa maraming hakbang at pag-apruba bago ito maisama sa master branch. Upang magsimula ng bagong branch sa GitHub, mag-navigate sa iyong bagong repository, i-click ang dropdown na may nakasulat na "branch: master," mag-type ng pangalan ng branch (tulad ng README-edits), at pagkatapos ay pindutin ang "create branch." Perpekto ang mga branch para sa mga bagong feature o pag-aayos ng bug.

5. Create and Commit Changes to a Branch
- Upang gumawa ng mga pagbabago sa isang sangay sa GitHub, pumunta sa view ng code para sa iyong bagong likhang sangay. I-click ang file na gusto mong baguhin, pagkatapos ay pindutin ang icon na lapis sa kanang itaas, gumawa ng anumang kinakailangang pag-edit, ilarawan ang iyong mga pagbabago sa pamamagitan ng pagsusulat ng commit message, at pagkatapos ay i-click ang “commit changes.” Ang bawat na-save na pagbabago ay tinatawag na commit. Ang bawat indibidwal na commit ay may sariling commit message na nagbibigay ng higit pang mga detalye kung bakit ginawa ang isang partikular na pagbabago. Ang mga commit na mensahe ay nagbibigay ng kasaysayan ng mga pagbabago at tumutulong sa mga tagapag-ambag ng proyekto na maunawaan kung paano nagbago ang proyekto sa paglipas ng panahon.
6. Open a Pull Request
- Upang maisama ang anumang sangay sa sangay ng ibang tao, dapat kang magbukas ng kahilingan sa paghila. Ang pull request ay ang paraan ng GitHub sa pag-abiso sa mga nauugnay na partido tungkol sa iyong kahilingan na isama ang mga pagbabago sa kanilang sangay. Ipapakita ng isang pull request sa pula at berde ang mga pagkakaiba ng nilalaman sa pagitan ng mga sangay. Maaari kang gumawa ng pull request anumang oras na makumpleto mo ang isang commit. Para sa pinakamagandang resulta, kapag nagpapadala ng pull request, maaari mong gamitin ang feature na “@” para banggitin ang mga partikular na tao kung saan kailangan mo ng feedback.
- To open a pull request, you’ll go to the “pull request” tab and hit the button that says “new pull request.” Next, in the “example comparisons” box, find the branch you made and compare it with the master. Ensure you like the changes and then click the “create pull request” button. Title your pull request and briefly describe the changes. To finish, click “create pull request.”
7. Merge Your Pull Request
- Ang pagsasama ng iyong kahilingan sa paghila sa master branch ay isang bagay na maaaring kailanganin mong ipasa sa iyong mga superyor upang mahawakan. Para sa kapakanan ng pag-aaral, gayunpaman, maaari mong sanayin ang paggawa nito sa iyong sarili. Pindutin lang ang button na nagsasabing “merge pull request,” piliin ang “confirm merge,” at pagkatapos ay tanggalin ang branch na iyong pinagsama kapag ito ay naisama na sa master.
